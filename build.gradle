buildscript {
    ext.kotlin_version = '1.3.71'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0-alpha04'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.4' apply false
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

repositories {
    jcenter()
    google()
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 21

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        kotlin.srcDirs = ['src']
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
    }

    buildTypes.release {
        minifyEnabled false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    libraryVariants.all { variant ->
        def task = project.tasks.create "${variant.name}Jar", Jar
        task.dependsOn variant.javaCompileProvider
        task.from variant.javaCompileProvider.orNull.destinationDir
        task.exclude '**/BuildConfig.class'
        task.exclude '**/R.class'
        task.exclude '**/R$*.class'
        artifacts.add('archives', task)
    }

}

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.71'
    compileOnly 'androidx.fragment:fragment:1.2.4'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.kotlin.srcDirs
    getArchiveClassifier().set('sources')
}

artifacts {
    archives sourcesJar
}

def privateProperties = new Properties()

if (file('private.properties').exists()) {
    privateProperties.load(new FileInputStream(file('private.properties')))
}

def bintrayUser = privateProperties.getProperty('bintray.user')
def bintrayApiKey = privateProperties.getProperty('bintray.apikey')

if (bintrayUser != null && bintrayApiKey != null) {
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    def publishedGroupId = 'justbucket.familiar'
    def libraryVersion = '0.3.0'
    def libraryDescription = 'Familiar extension api. Use this via compileOnly'
    def gitUrl = 'https://github.com/JustBucket416/Familiar-Api'

    def allLicenses = ['Apache-2.0']

    group = publishedGroupId
    version = libraryVersion

    publishing.publications {
        android.libraryVariants.all { variant ->
            if (variant.name != "release") {
                return
            }
            bintrayPublication(MavenPublication) {
                artifact "$buildDir/outputs/aar/extension-${variant.name}.aar"
                groupId publishedGroupId
                artifactId 'extension'
                version libraryVersion
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayApiKey
        publications = ['bintrayPublication']
        configurations = ['archives']
        pkg {
            repo = 'Familiar-extension-api'
            name = 'Familiar-extension'
            desc = libraryDescription
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true
            publicDownloadNumbers = true
            version.desc = libraryDescription
        }
    }
}